Crear la base de datos

use ecommerce;

Crear las colecciones

db.createCollection('productos');
db.createCollection('mensajes');

1 - Insertar las rows a productos

db.productos.insertMany([
    {
        "title": "Producto 1",
        "price": 100,
        "thumbnail": "url1",
    },
    {
        "title": "Producto 2",
        "price": 320,
        "thumbnail": "url2",
    },
    {
        "title": "Producto 3",
        "price": 930,
        "thumbnail": "url3",
    },
    {
        "title": "Producto 4",
        "price": 1140,
        "thumbnail": "url4",
    },
    {
        "title": "Producto 5",
        "price": 2250,
        "thumbnail": "url5",
    },
    {
        "title": "Producto 6",
        "price": 3360,
        "thumbnail": "url6",
    },
    {
        "title": "Producto 7",
        "price": 4470,
        "thumbnail": "url7",
    },
    {
        "title": "Producto 8",
        "price": 5000,
        "thumbnail": "url8",
    },
    {
        "title": "Producto 9",
        "price": 3450,
        "thumbnail": "url9",
    },
    {
        "title": "Product 10",
        "price": 2860,
        "thumbnail": "url10",
    }
]);

Insertar algunos mensajes

db.mensajes.insertMany([{timestamp: ISODate()}, {timestamp: ISODate()}])

3 - Listar todos los productos

db.productos.find();

4 - Contar la cantidad de documentos en productos

db.productos.countDocuments();

5 - Agregar otro producto más a *productos*

a)

db.productos.insertOne({
        "title": "Prod11",
        "price": 3860,
        "thumbnail": "url11",
    });

- Devolver el **título** del producto con el id **5**

db.productos.find({"id": 5}, {title: 1});

b) i) - Listar productos con precio menor a 1000 pesos:

db.productos.find({price: {$lt: 1000}});

b) ii) Listar los productos con precio entre los 1000 a 3000 pesos.

db.productos(find {price: {$gt: 1000, $lt: 3000 });

b) iii) - Listar los productos con precio mayor a 3000 pesos.

db.productos.find({price: {$gt: 3000}});

b) iv) - Realizar una consulta que traiga sólo el nombre del tercer producto más barato.

db.productos.find({},{title:1, _id:0}).sort({price:1}).skip(2).limit(1);

c) - Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.

db.productos.updateMany({}, {$inc: {stock: 100}});

d) - Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.

db.productos.updateMany({price: {$gt: 4000}}, {$set: {stock: 0}});

e) - Borrar los productos con precio menor a 1000 pesos

db.productos.deleteMany({price: {$lt: 1000}});

6 - Creación del usuario **pepe**, con contraseña: **asd456**. Permiso solo de lectura

db.createUser({user: "pepe", pwd: "asd456", roles: [{role: "read", db: "ecommerce"}]});

- Login del usuario creado anteriormente

mongo -u pepe -p --authenticationDatabase ecommerce 

- Vista de las DB que tiene acceso

> show dbs
ecommerce  0.000GB

- Intentando agregar un *producto* a la colección **producto** en la db **ecommerce**

> use ecommerce
switched to db ecommerce
> db.productos.insertOne({nombre: "someName"})
uncaught exception: WriteCommandError({
	"ok" : 0,
	"errmsg" : "not authorized on ecommerce to execute command..........
	"codeName" : "Unauthorized"
})